#include <sys/time.h>
#include <assert.h>
#include <pthread.h>
#include <ucontext.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <link.h>
#include <elf.h>
#include <setjmp.h>

#include "myelf.h"

typedef unsigned long ADDR;

struct callsite;

#define MAXFRAMES 256

struct threadcontext {
    jmp_buf jb;
    ADDR bp;
    ADDR ip;
    ADDR sp;
    size_t frameCount;
    ADDR stack[MAXFRAMES];
};

struct function {
    struct function *next;
    struct ElfObject *o;
    struct FunctionInfo *info;
    struct callsite *callSites; // points between start and end where this functions calls others.
    int toCount;
};

struct callsite {
    /*
     * functions called from here (should be a very short list),
     * for most cases, it'll be a single destination. For virtual functions
     * and pointer-to-function dispatch, it'll still be quite limited.
     */
    struct function *calls;
    /* list linkage for siblings. */
    struct callsite *next;
    ADDR ip;
    int fromCount;
};

static struct callsite bottom;
static struct ElfObject *elf;
static pthread_key_t tls;
static sigset_t sigs;
static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;

extern struct r_debug _r_debug;

static void showSite(FILE *file, struct callsite *site, int indent);
static void showFunction(FILE *file, struct function *func, int indent, ADDR);

static void
updateObjects()
{
    struct link_map *map;
    pthread_mutex_lock(&lock);
    for (map = _r_debug.r_map; map; map = map->l_next) {
        struct ElfObject *o;
        for (o = elf;; o = o->next) {
            int rc;
            if (o == 0)  {
                if (map->l_name[0] != 0) {
                    struct ElfObject *o;
                    o = malloc(sizeof *o);
                    rc = elf32LoadObjectFile(map->l_name, o);
                    if (rc != 0) {
                        fprintf(stderr, "failed to load object %s\n", map->l_name);
                    } else {
                        o->next = elf;
                        o->baseAddr = map->l_addr;
                        o->udat = map;
                        elf = o;
                        fprintf(stderr, "loaded %s at %x descr=%p\n", map->l_name, map->l_addr, o);
                    }
                }
                break;
            }
            if (o->udat == map)
                break;
        }
    }
    pthread_mutex_unlock(&lock);
}

static struct callsite *
newSite(ADDR ip)
{
    struct callsite *site = malloc(sizeof (struct callsite));
    site->ip = ip;
    site->calls = 0;
    site->next = 0;
    site->fromCount = 0;
    return site;
}

static struct function *
newFunction(struct ElfObject *obj, struct FunctionInfo *info)
{
    struct function *func = malloc(sizeof (struct function));
    func->info = info;
    func->o = obj;
    func->callSites = 0;
    func->next = 0;
    func->toCount = 0;
    return func;
}

static void
sigsegv(int sig, siginfo_t *info, void *uc_v)
{
    struct threadcontext *ctx = pthread_getspecific(tls);
    ucontext_t *uc = (ucontext_t *)uc_v;
    mcontext_t *mc = &uc->uc_mcontext;

    if (ctx == 0) {
        fprintf(stderr, "fault at %x: no context\n", mc->gregs[REG_EIP]);
        raise(SIGTRAP);
    }
    fprintf(stderr, "fault at %x: %lx/%lx\n", mc->gregs[REG_EIP], ctx->ip, ctx->bp);
    longjmp(ctx->jb, 1);
}

static void
sigprof(int sig, siginfo_t *info, void *uc_v)
{
    ucontext_t *uc = (ucontext_t *)uc_v;
    mcontext_t *mc = &uc->uc_mcontext;

    struct threadcontext context;
    int i;
    ADDR newBp, newIp;
    struct ElfObject *o;

    memset(&context, 0, sizeof context);
    assert(pthread_getspecific(tls) == 0);
    pthread_setspecific(tls, &context);

    context.bp = mc->gregs[REG_EBP];
    context.ip = mc->gregs[REG_EIP];
    context.sp = mc->gregs[REG_ESP];

    updateObjects();

    if (setjmp(context.jb) == 0) {
        for (context.frameCount = 0; context.frameCount < MAXFRAMES; ++context.frameCount) {
            context.stack[context.frameCount] = context.ip;
            if (context.bp < 0x80000)
                break;
            if (elf32FindObject(elf, context.ip, &o) != 0) {
                fprintf(stderr, "short stack: address %lx not located\n", context.ip);
                break;
            }
            newBp = ((ADDR *)context.bp)[0];
            if (newBp <= context.bp)
                break;
            newIp = ((ADDR *)context.bp)[1];
            if (newIp == 0)
                break;
            context.ip = newIp;
            context.bp = newBp;
        }
    } else {
        pthread_setspecific(tls, 0);
        return;
    }
    pthread_setspecific(tls, 0);

    struct callsite *cursite = &bottom;
    if (context.frameCount == 0)
        return;

    for (i = context.frameCount - 1;  ; --i) {
        struct callsite *site, **sitep;
        struct function *function, **functionp;
        ADDR ip;

        ip = context.stack[i];

        struct FunctionInfo *info;
        if (elf32FindObject(elf, ip, &o) != 0
                || elf32FindFunction(o, ip - o->baseAddr, &info) != 0) {
            o = 0;
            info = 0;
        }

        // From the previous callsite, find a call to this function.
        for (functionp = &cursite->calls;; functionp = &function->next) {
            function = *functionp;
            if (function == 0) {
                *functionp = function = newFunction(o, info);
                break;
            } else if (function->info == info) {
                break;
            }
        }

        function->toCount++;

        // Don't create a callsite for the top frame: it's a sampled "real" IP, not a call to a function.
        if (i == 0)
            break;

        // Find or create a callsite out of this function at this IP.
        for (sitep = &function->callSites;; sitep = &site->next) {
            site = *sitep;
            if (site == 0) {
                site = *sitep = newSite(ip);
                break;
            } else if (site->ip == ip) {
                break;
            }
        }

        site->fromCount++;
        cursite = site;
    }
}

static void
showFunction(FILE *file, struct function *func, int indent, ADDR from)
{
    fprintf(file, "%8d %8lx->%8lx %s%s %s\n",
            func->toCount,
            from,
            func->info ? (ADDR)func->info->elfSym->st_value : (ADDR)0,
            pad(indent),
            func->info ? func->info->elfName : "<unknown>",
            func->o ? func->o->fileName : "<none>");


    struct callsite *cur, *done;
    while (func->callSites) {
        struct callsite **highestp, **prevp = &func->callSites;
        for (highestp = 0; *prevp; prevp = &cur->next) {
            cur = *prevp;
            if (highestp == 0 || cur->fromCount > (*highestp)->fromCount)
                highestp = prevp;
        }
        cur = *highestp;
        *highestp = cur->next; // Remove highest from site list.
        cur->next = done; // add to done list
        showSite(file, cur, indent + 2);
    }
    func->callSites = done;

}

static void
showSite(FILE *file, struct callsite *site, int indent)
{
    struct function *func;
    for (func = site->calls; func; func = func->next)
        showFunction(file, func, indent, site->ip);
}


static struct sigaction oldsigsegv;

static void
profinit()
{
    struct itimerval it, oldit;
    struct sigaction act;

    fprintf(stderr, "initialize profiling...\n");

    struct link_map *map;
    map = _r_debug.r_map;
    elf = malloc(sizeof *elf);
    const char *exec = getenv("AOUT");
    int rc = elf32LoadObjectFile(exec, elf);
    if (rc != 0)
        fprintf(stderr, "cannot load elf object");
    sigemptyset(&sigs);
    sigaddset(&sigs, SIGPROF);
    sigprocmask(SIG_BLOCK, &sigs, 0);

    memset(&it, 0, sizeof it);
    it.it_interval.tv_sec = 0;
    it.it_interval.tv_usec = 1000;
    it.it_value = it.it_interval;

    setitimer(ITIMER_PROF, &it, &oldit);
    act.sa_sigaction = sigprof;
    sigemptyset(&act.sa_mask);
    sigaddset(&act.sa_mask, SIGPROF);
    act.sa_flags = SA_SIGINFO;
    sigaction(SIGPROF, &act, 0);

    act.sa_sigaction = sigsegv;
    sigaction(SIGSEGV, &act, &oldsigsegv);

    rc = pthread_key_create(&tls, 0);
    if (rc != 0)
        abort();
    sigprocmask(SIG_UNBLOCK, &sigs, 0);
}

static int
proffini()
{
    sigaction(SIGSEGV, &oldsigsegv, 0);
    sigprocmask(SIG_BLOCK, &sigs, 0);
    FILE *f = fopen("pmeprof", "w");
    showSite(f, &bottom, 0);
    fclose(f);
    return 0;
}

void
_init()
{
    profinit();
}

void
_fini()
{

    fprintf(stderr, "complete profiling...\n");
    proffini();
}
